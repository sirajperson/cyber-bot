identify_web_vulnerability_task:
  description: >
    Analyze the CyberSkyline module data ('crawl_data') for a web exploitation challenge. Examine the
    target URL, page description, VLM screenshot analysis, form fields, and any source code snippets.
    Identify the most likely web application vulnerability (SQLi, XSS, LFI, File Upload, etc.)
    that could lead to finding the flag. Incorporate previous feedback ('feedback') if available.
  expected_output: >
    The name of the most likely web vulnerability identified. Include brief reasoning.
    Example: "Vulnerability: SQL Injection in the 'search' parameter based on error messages described."

develop_web_exploit_plan_task:
  description: >
    Based on the identified web vulnerability, create a step-by-step plan to exploit it and retrieve the flag.
    Specify the tools (sqlmap, Burp, curl) or manual techniques and provide example payloads or commands.
    Use context from 'crawl_data' and incorporate 'feedback' if provided.
  expected_output: >
    A detailed, numbered exploitation plan.
    Example:
    1. Vulnerability identified as SQL Injection in the search parameter 'q'.
    2. Use sqlmap to confirm and exploit: `sqlmap -u "http://<TARGET_URL>/search?q=test" --dbs --batch`
    3. Enumerate databases, tables, and columns to find the flag table/column.
    4. Dump the flag data: `sqlmap -u "http://<TARGET_URL>/search?q=test" -D <DB_NAME> -T <TABLE_NAME> -C <COLUMN_NAME> --dump --batch`

validate_web_exploit_plan_task:
  description: >
    Review the proposed web exploitation plan ('analysis_text'). Verify the plausibility of the identified
    vulnerability based on 'crawl_data'. Check if the chosen tools, techniques, and example payloads/commands
    are correct and appropriate for the specific vulnerability type.
  expected_output: >
    A JSON object adhering to the 'AnalysisVerification' Pydantic model, containing:
    - 'valid': boolean (True if the plan is sound, False otherwise).
    - 'feedback': string (Specific, actionable feedback if 'valid' is False, otherwise None or empty).
    Example valid: {"valid": true, "feedback": null}
    Example invalid: {"valid": false, "feedback": "Feedback: The plan suggests using sqlmap, but the identified vulnerability is Cross-Site Scripting (XSS). The plan needs to focus on crafting XSS payloads (e.g., <script>alert(1)</script>) to test for execution, not SQL injection commands."}