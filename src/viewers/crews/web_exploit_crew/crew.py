from crewai import Agent, Crew, Process, Task
from crewai.project import CrewBase, agent, crew, task

# Import tools if needed later, e.g., SqlmapTool, BrowserTool

@CrewBase
class WebExploitCrew:
    """WebExploitCrew identifies and plans exploitation for web vulnerabilities."""
    agents_config = 'config/agents.yaml'
    tasks_config = 'config/tasks.yaml'

    @agent
    def vulnerability_identifier(self) -> Agent:
        """Agent that identifies potential web vulnerabilities."""
        return Agent(
            config=self.agents_config['vulnerability_identifier'],
            # tools=[], # Add browser/analysis tools if needed
            verbose=True
        )

    @agent
    def exploit_planner(self) -> Agent:
        """Agent that creates the exploitation plan."""
        return Agent(
            config=self.agents_config['exploit_planner'],
             # tools=[SqlmapTool()], # Example tool
            verbose=True
        )

    @agent
    def web_qa_validator(self) -> Agent:
        """Agent that validates the web exploitation plan."""
        return Agent(
            config=self.agents_config['web_qa_validator'],
            verbose=True
        )

    @task
    def identify_web_vulnerability_task(self) -> Task:
        """Task to identify the web vulnerability."""
        # Receives feedback context from validator
        return Task(
            config=self.tasks_config['identify_web_vulnerability_task'],
            agent=self.vulnerability_identifier(),
            context=[self.validate_web_exploit_plan_task()] # Feedback context
        )

    @task
    def develop_web_exploit_plan_task(self) -> Task:
        """Task to create the exploit plan and payloads/commands."""
        # Needs vulnerability context and feedback context
        return Task(
            config=self.tasks_config['develop_web_exploit_plan_task'],
            agent=self.exploit_planner(),
            context=[self.identify_web_vulnerability_task(), self.validate_web_exploit_plan_task()]
        )

    @task
    def validate_web_exploit_plan_task(self) -> Task:
        """Task to validate the vulnerability ID and exploit plan."""
        # Output Pydantic model is handled by the flow
        return Task(
            config=self.tasks_config['validate_web_exploit_plan_task'],
            agent=self.web_qa_validator(),
            context=[self.develop_web_exploit_plan_task()] # Needs the plan to validate
        )

    @crew
    def crew(self) -> Crew:
        """Creates the WebExploitCrew"""
        return Crew(
            agents=self.agents,
            tasks=self.tasks,
            process=Process.sequential, # identify -> develop -> validate
            verbose=True,
        )