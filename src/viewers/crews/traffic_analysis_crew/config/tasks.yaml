analyze_pcap_task:
  description: >
    Based on the CyberSkyline Network Traffic Analysis challenge described in 'crawl_data',
    develop a step-by-step plan to analyze the associated packet capture (.pcap file).
    Specify the Wireshark display filters or exact tshark commands needed to isolate
    relevant traffic, extract data, or identify patterns pertinent to the challenge question.
    Incorporate previous feedback ('feedback') if available.
  expected_output: >
    A clear, step-by-step plan including specific Wireshark display filters or tshark commands.
    Example:
    1. Identify HTTP traffic containing file transfers: Apply Wireshark filter `http.request.method == "GET" && http.content_type contains "application/octet-stream"`
    2. Follow the TCP stream for any matching packets to reconstruct the file.
    OR
    1. Extract all files transferred over HTTP: Use command `tshark -r <capture.pcap> --export-objects http,files_output`

validate_traffic_analysis_task:
  description: >
    Review the proposed network traffic analysis plan ('analysis_text'). Verify the correctness
    and relevance of the suggested Wireshark filters or tshark commands for the stated objective
    based on the original challenge context ('crawl_data'). Check for syntax errors or logical flaws in the plan.
  expected_output: >
    A JSON object adhering to the 'AnalysisVerification' Pydantic model, containing:
    - 'valid': boolean (True if the plan is sound, False otherwise).
    - 'feedback': string (Specific, actionable feedback if 'valid' is False, otherwise None or empty).
    Example valid: {"valid": true, "feedback": null}
    Example invalid: {"valid": false, "feedback": "Feedback: The plan suggests filtering for 'tcp.port == 80', but the challenge mentions finding FTP credentials. The filter should target 'tcp.port == 21' or use the 'ftp' protocol filter."}