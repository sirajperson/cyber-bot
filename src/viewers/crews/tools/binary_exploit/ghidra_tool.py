import subprocess
import os
import logging
import shlex
import tempfile
import shutil
from typing import Type, Any, Optional, List
from pydantic import BaseModel, Field
from crewai.tools import BaseTool

logger = logging.getLogger(__name__)

# --- Configuration ---
# Adjust these paths based on the actual Ghidra installation in the Docker container
GHIDRA_ANALYZER_PATH = os.getenv("GHIDRA_ANALYZER_PATH", "/usr/share/ghidra/support/analyzeHeadless")
GHIDRA_SCRIPTS_DIR = "/app/ghidra_scripts" # Directory within the container for analysis scripts
GHIDRA_PROJECTS_DIR_BASE = "/app/ghidra_projects" # Base directory for temporary projects

# --- Input Schema ---
class GhidraToolInput(BaseModel):
    """Input schema for GhidraTool."""
    file_path: str = Field(..., description="The path to the binary file to analyze, relative to the '/app/data' directory.")
    script_name: str = Field(..., description=f"The name of the Ghidra Python script (must exist in '{GHIDRA_SCRIPTS_DIR}') to run against the binary (e.g., 'find_main_functions.py', 'extract_strings_script.py').")
    script_args: Optional[List[str]] = Field(None, description="Optional list of arguments to pass to the Ghidra script.")

class GhidraTool(BaseTool):
    name: str = "Ghidra Headless Analyzer"
    description: str = (
        f"Runs a specified Ghidra analysis script non-interactively against a binary file using Ghidra's 'analyzeHeadless'. "
        f"Useful for automated static analysis, decompilation, and vulnerability scanning on supported binaries (ELF, PE, etc.). "
        f"Provide the binary path relative to '/app/data' and the name of a script located in '{GHIDRA_SCRIPTS_DIR}'. "
        "Returns the standard output of the analysis script."
    )
    args_schema: Type[BaseModel] = GhidraToolInput

    def _run(self, file_path: str, script_name: str, script_args: Optional[List[str]] = None) -> str:
        """
        Executes Ghidra analyzeHeadless with the specified script.
        """
        # --- Validate Paths ---
        base_dir = "/app/data"
        relative_path = os.path.normpath(os.path.join('/', file_path.lstrip('/'))).lstrip('/')
        target_file = os.path.abspath(os.path.join(base_dir, relative_path))

        script_path = os.path.abspath(os.path.join(GHIDRA_SCRIPTS_DIR, script_name))

        if not target_file.startswith(base_dir):
            logger.warning(f"Attempted path traversal for binary: {file_path}")
            return f"Error: Invalid binary file path '{file_path}'. Path must be within the data directory."
        if not os.path.isfile(target_file):
            logger.error(f"Binary file not found for Ghidra: '{target_file}' (resolved from '{file_path}')")
            return f"Error: Binary file not found at '{target_file}' (resolved from '{file_path}')."

        if not script_path.startswith(GHIDRA_SCRIPTS_DIR):
             logger.warning(f"Attempted path traversal for script: {script_name}")
             return f"Error: Invalid script name '{script_name}'. Script must exist in {GHIDRA_SCRIPTS_DIR}."
        if not os.path.isfile(script_path):
            logger.error(f"Ghidra script not found: '{script_path}' (resolved from '{script_name}')")
            return f"Error: Ghidra script '{script_name}' not found in {GHIDRA_SCRIPTS_DIR}."

        if not os.path.exists(GHIDRA_ANALYZER_PATH):
             logger.error(f"Ghidra analyzeHeadless not found at configured path: {GHIDRA_ANALYZER_PATH}")
             return f"Error: Ghidra analyzeHeadless command not found at '{GHIDRA_ANALYZER_PATH}'. Check installation and GHIDRA_ANALYZER_PATH env var."

        # --- Create Temporary Ghidra Project ---
        # analyzeHeadless needs a project directory
        temp_project_dir = tempfile.mkdtemp(prefix="ghidraproj_", dir=GHIDRA_PROJECTS_DIR_BASE)
        project_name = os.path.basename(temp_project_dir)
        logger.info(f"Created temporary Ghidra project directory: {temp_project_dir}")

        # --- Construct Command ---
        command = [
            GHIDRA_ANALYZER_PATH,
            temp_project_dir, # Project location
            project_name,     # Project name
            "-import", target_file, # Import the target binary
            "-scriptPath", GHIDRA_SCRIPTS_DIR, # Specify directory containing scripts
            "-postScript", script_name, # Script to run after analysis (use -preScript if needed before)
            "-deleteProject" # Clean up project dir after running
            # Add other analyzeHeadless options if needed, e.g., -noanalysis
        ]

        # Add script arguments if provided
        if script_args:
            command.extend(script_args)

        logger.info(f"Executing command: {' '.join(shlex.quote(c) for c in command)}")

        # --- Execute Command ---
        try:
            # Ghidra headless can take significant time and memory
            result = subprocess.run(
                command,
                capture_output=True,
                text=True,
                check=False, # Capture stderr on failure
                timeout=600 # 10 minutes timeout for analysis
            )

            # --- Process Output ---
            # Ghidra scripts typically print results to stdout
            output = f"Ghidra analysis result using script '{script_name}' on '{file_path}':\n"
            if result.stdout:
                output += f"--- Script Output (stdout) ---\n{result.stdout.strip()}\n"
            else:
                 output += "--- Script Output (stdout) ---\n(No standard output from script)\n"

            # stderr often contains Ghidra's own logging/errors
            if result.stderr:
                # Filter potentially noisy stderr, look for common errors
                filtered_stderr = "\n".join(line for line in result.stderr.splitlines() if "INFO" not in line and "DEBUG" not in line)
                if filtered_stderr.strip():
                     output += f"--- Ghidra/Script Error Output (stderr) ---\n{filtered_stderr.strip()}\n"

            output += f"Exit Code: {result.returncode}\n"

            # Limit output length
            max_len = 8000
            if len(output) > max_len:
                output = output[:max_len] + "\n... (output truncated)"

            return output.strip()

        except subprocess.TimeoutExpired:
            logger.error(f"Ghidra command timed out after 600 seconds for file '{file_path}'.")
            return f"Error: Ghidra command timed out after 600 seconds on '{file_path}'."
        except Exception as e:
            logger.error(f"An unexpected error occurred running Ghidra on '{file_path}': {e}", exc_info=True)
            return f"An unexpected error occurred running Ghidra: {e}"
        finally:
            # Clean up temporary project directory if -deleteProject somehow fails
            if os.path.exists(temp_project_dir):
                logger.warning(f"Attempting to clean up potentially leftover Ghidra project: {temp_project_dir}")
                shutil.rmtree(temp_project_dir, ignore_errors=True)


# Example usage (for local testing - requires Ghidra installed, configured paths, and a test script)
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - [%(name)s] %(message)s')

    # --- Create dummy files/dirs for testing ---
    script_dir = os.path.dirname(os.path.abspath(__file__))
    project_root = os.path.abspath(os.path.join(script_dir, '../../../../..'))
    data_dir_abs = os.path.join(project_root, 'data')
    ghidra_scripts_abs = os.path.join(project_root, 'ghidra_scripts_test') # Use a test dir
    ghidra_projects_abs = os.path.join(project_root, 'ghidra_projects_test')
    os.makedirs(data_dir_abs, exist_ok=True)
    os.makedirs(ghidra_scripts_abs, exist_ok=True)
    os.makedirs(ghidra_projects_abs, exist_ok=True)

    # Path relative to /app/data
    test_prog_relative = "test_ghidra_prog"
    # Absolute path for compiling/deleting
    test_prog_abs = os.path.join(data_dir_abs, test_prog_relative)
    test_c_file = os.path.join(data_dir_abs, "test_ghidra_prog.c")

    # Path relative to GHIDRA_SCRIPTS_DIR
    test_script_relative = "hello_ghidra.py"
    test_script_abs = os.path.join(ghidra_scripts_abs, test_script_relative)

    # --- Create dummy C file and compile ---
    compile_success = False
    try:
        with open(test_c_file, "w") as f:
            f.write('#include <stdio.h>\nint main(int argc, char** argv) { printf("Hello Ghidra Test! Argc=%d\\n", argc); return 0; }\n')
        print(f"Created dummy C file: {test_c_file}")
        compile_cmd = ["gcc", test_c_file, "-o", test_prog_abs]
        print(f"Compiling with: {' '.join(compile_cmd)}")
        compile_result = subprocess.run(compile_cmd, check=True)
        os.chmod(test_prog_abs, 0o755)
        print(f"Compiled dummy executable: {test_prog_abs}")
        compile_success = True
    except Exception as e:
         print(f"WARNING: Could not compile test executable ({e}). Ghidra tests might fail.")

    # --- Create dummy Ghidra script ---
    try:
        with open(test_script_abs, "w") as f:
            f.write("# Simple Ghidra script example\n")
            f.write("#@category CrewAI.Test\n") # Ghidra script header
            f.write("from ghidra.app.script import GhidraScript\n\n")
            f.write("class HelloGhidra(GhidraScript):\n")
            f.write("    def run(self):\n")
            f.write("        print('Hello from Ghidra Script!')\n")
            f.write("        print('Program Name: {}'.format(currentProgram.getName()))\n")
            f.write("        mainFunc = self.getFunction('main')\n")
            f.write("        if mainFunc:\n")
            f.write("            print('Found main function at: {}'.format(mainFunc.getEntryPoint()))\n")
            f.write("        else:\n")
            f.write("            print('Could not find main function.')\n")
            f.write("        # Access script args (example)\n")
            f.write("        args = self.getScriptArgs()\n")
            f.write("        print('Script Args Received: {}'.format(args))\n\n")
            f.write("#Instantiate and run the script class\n")
            f.write("#HelloGhidra().run()\n") # Standard way Ghidra runs it

        print(f"Created dummy Ghidra script: {test_script_abs}")
    except Exception as e:
        print(f"WARNING: Could not create dummy Ghidra script ({e}). Tests will likely fail.")


        # --- Test Tool ---
        # !! IMPORTANT: For local test, override paths to match local setup !!
        # This assumes Ghidra's analyzeHeadless is in PATH or GHIDRA_ANALYZER_PATH is set correctly on HOST
        # It also uses the test script/project dirs created above
        print("\n--- Testing Ghidra Tool (requires Ghidra installed and configured locally) ---")
        tool = GhidraTool()
        # Override paths for local testing
        tool.GHIDRA_SCRIPTS_DIR = ghidra_scripts_abs
        tool.GHIDRA_PROJECTS_DIR_BASE = ghidra_projects_abs

        if compile_success and os.path.exists(test_script_abs) and os.path.exists(GHIDRA_ANALYZER_PATH):
            print("\n--- Test 1: Run hello_ghidra.py script ---")
            # Agent provides path relative to /app/data
            result1 = tool.run(file_path=test_prog_relative, script_name=test_script_relative, script_args=["arg1", "test_arg2"])
            print(result1)

            print("\n--- Test 2: Non-existent script ---")
            result2 = tool.run(file_path=test_prog_relative, script_name="nosuchscript.py")
            print(result2)

            print("\n--- Test 3: Non-existent binary ---")
            result3 = tool.run(file_path="nosuchbinary", script_name=test_script_relative)
            print(result3)
        else:
            print("\n--- Skipping Ghidra execution tests due to setup issues (compile failed, script missing, or analyzeHeadless not found) ---")

    # --- Cleanup ---
    finally:

        if os.path.exists(test_c_file): os.remove(test_c_file)
        if os.path.exists(test_prog_abs): os.remove(test_prog_abs)
        if os.path.exists(test_script_abs): os.remove(test_script_abs)
        # Clean up project dir base if it contains temp dirs
        if os.path.exists(ghidra_projects_abs):
            try:
                # Be careful removing directories, ensure it's the test one
                if ghidra_projects_abs.endswith('_test'):
                     shutil.rmtree(ghidra_projects_abs, ignore_errors=True)
                     print(f"Cleaned up Ghidra projects test directory: {ghidra_projects_abs}")
            except Exception as e:
                 print(f"Warning: Could not fully cleanup Ghidra projects test directory: {e}")
        if os.path.exists(ghidra_scripts_abs):
             try:
                 if ghidra_scripts_abs.endswith('_test'):
                      shutil.rmtree(ghidra_scripts_abs, ignore_errors=True)
                      print(f"Cleaned up Ghidra scripts test directory: {ghidra_scripts_abs}")
             except Exception as e:
                  print(f"Warning: Could not fully cleanup Ghidra scripts test directory: {e}")

        print(f"\nCleaned up dummy files and test directories.")
