import os
import logging
from typing import Type, Any
from pydantic import BaseModel, Field
from crewai.tools import BaseTool

logger = logging.getLogger(__name__)

# --- Input Schema ---
class IlspyToolInput(BaseModel):
    """Input schema for IlspyTool."""
    file_path: str = Field(..., description="The path to the .NET assembly file (e.g., .dll, .exe) to analyze, relative to the '/app/data' directory.")

class IlspyTool(BaseTool):
    name: str = ".NET Decompiler Instructions (ILSpy/AvaloniaILSpy)"
    description: str = (
        "Provides instructions on how to use the ILSpy .NET decompiler (or its cross-platform variant AvaloniaILSpy) "
        "to analyze a .NET assembly (DLL or EXE file). Use this tool as an alternative or alongside dnSpy instructions "
        "when the 'FileTool' identifies a file as a PE32 executable for MS Windows (Mono/.Net assembly)."
        "Input the file path relative to '/app/data'."
    )
    args_schema: Type[BaseModel] = IlspyToolInput

    def _run(self, file_path: str) -> str:
        """
        Returns instructions for using ILSpy / AvaloniaILSpy.
        """
        # --- Security/Context Check ---
        base_dir = "/app/data"
        # Sanitize file_path
        relative_path = os.path.normpath(os.path.join('/', file_path.lstrip('/'))).lstrip('/')
        target_file_abs = os.path.abspath(os.path.join(base_dir, relative_path))
        target_file_container_path = f"/app/data/{relative_path}" # Path as seen inside container

        if not target_file_abs.startswith(base_dir):
            logger.warning(f"Attempted path traversal: {file_path}")
            return f"Error: Invalid file path '{file_path}'. Path must be within the data directory."
        # No existence check needed as it only provides instructions.

        logger.info(f"Generating ILSpy/AvaloniaILSpy instructions for: {target_file_container_path}")

        # --- Generate Instructions ---
        instructions = f"""
        **Instructions for Analyzing .NET Assembly:** '{target_file_container_path}' **using ILSpy/AvaloniaILSpy**

        **Recommended Tools:**
        * **ILSpy (Windows):** Open-source .NET decompiler. 
        * **AvaloniaILSpy (Linux/Cross-Platform):** A cross-platform UI based on ILSpy. (Check if installed in the environment)
        * **dnSpyEx (Windows):** Alternative with debugging features.

        **General Steps:**
        1.  **Open the Assembly:** Launch ILSpy or AvaloniaILSpy and load the file `{target_file_container_path}` (usually File > Open or drag-and-drop).
        2.  **Assembly Explorer:** Use the tree view on the left to browse the assembly's structure: namespaces, classes, methods, fields, properties, events.
        3.  **Decompile Code:** Select a type or method in the tree view. The decompiled C# code (or IL, C++/CLI depending on settings) will appear in the main panel.
        4.  **Analyze Logic:** Examine the decompiled code, paying attention to methods related to the challenge objectives (e.g., authentication, data processing, flag validation).
        5.  **Search:** Use the search functionality (often Ctrl+F or a dedicated search bar) to look for specific strings (like "flag", "password", API keys), method names, or types.
        6.  **Analyze Usage / Find References:** Right-click on methods, fields, or types and select "Analyze" or "Find Usage" (or similar options) to see where they are called or used throughout the codebase. This helps understand program flow.
        7.  **Examine Resources:** Check for embedded resources within the assembly which might contain data or other files.

        **Focus Areas for CTFs:**
        * Entry points (`Main` method).
        * Methods handling user input, configuration, or network requests.
        * String decryption routines or obfuscated code sections.
        * Hardcoded secrets or interesting constants.
        * Comparisons or logic related to flags or success conditions.

        **Note:** Direct execution of these GUI tools is not available through this interface. Include these steps in your analysis plan. AvaloniaILSpy might be available in the Linux container; check installation.
        """

        return instructions.strip()

# Example usage (for local testing)
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - [%(name)s] %(message)s')
    tool = IlspyTool()

    print("\n--- Test 1: Generate instructions ---")
    # Agent provides path relative to /app/data
    result1 = tool.run(file_path="MyWebApp.dll")
    print(result1)

    print("\n--- Test 2: Invalid path ---")
    result2 = tool.run(file_path="../root/.bashrc")
    print(result2)
