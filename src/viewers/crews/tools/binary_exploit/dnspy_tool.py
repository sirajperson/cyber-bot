import os
import logging
from typing import Type, Any
from pydantic import BaseModel, Field
# Correct import for BaseTool
from crewai.tools import BaseTool

logger = logging.getLogger(__name__)

# --- Input Schema ---
class DnspyToolInput(BaseModel):
    """Input schema for DnspyTool."""
    file_path: str = Field(..., description="The path to the .NET assembly file (e.g., .dll, .exe) to analyze, relative to the '/app/data' directory.")

# --- Tool Definition ---
# Ensure class name is DnspyTool
class DnspyTool(BaseTool):
    name: str = ".NET Decompiler Instructions (dnSpy)"
    description: str = (
        "Provides instructions on how to use the dnSpyEx .NET decompiler and debugger "
        "to analyze a .NET assembly (DLL or EXE file). Use this tool when the 'FileTool' identifies "
        "a file as a PE32 executable for MS Windows (Mono/.Net assembly), especially if debugging might be needed."
        "Input the file path relative to '/app/data'."
    )
    args_schema: Type[BaseModel] = DnspyToolInput

    def _run(self, file_path: str) -> str:
        """
        Returns instructions for using dnSpyEx.
        """
        # --- Security/Context Check ---
        base_dir = "/app/data"
        # Sanitize file_path
        relative_path = os.path.normpath(os.path.join('/', file_path.lstrip('/'))).lstrip('/')
        target_file_abs = os.path.abspath(os.path.join(base_dir, relative_path))
        target_file_container_path = f"/app/data/{relative_path}" # Path as seen inside container

        if not target_file_abs.startswith(base_dir):
            logger.warning(f"Attempted path traversal: {file_path}")
            return f"Error: Invalid file path '{file_path}'. Path must be within the data directory."
        # No existence check needed as it only provides instructions.

        logger.info(f"Generating dnSpy instructions for: {target_file_container_path}")

        # --- Generate Instructions ---
        instructions = f"""
        **Instructions for Analyzing .NET Assembly:** '{target_file_container_path}' **using dnSpyEx**

        **dnSpyEx** is a popular fork of dnSpy, a .NET decompiler and debugger (primarily for Windows). 

        **General Steps:**
        1.  **Open the Assembly:** Launch dnSpyEx and load the file `{target_file_container_path}` (File > Open or drag-and-drop).
        2.  **Assembly Explorer:** Use the tree view on the left to browse namespaces, classes, methods, fields, etc.
        3.  **Decompile Code:** Select a method to view its decompiled C# code in the main panel. Analyze the logic.
        4.  **Analyze References:** Right-click on code elements (methods, fields, types) and use "Analyze" or "Find References" / "Find Usage" options to understand code flow and dependencies.
        5.  **Search:** Use the search bar (bottom panel) to find specific strings, types, methods, etc., throughout the assembly.
        6.  **Edit/Modify (Use Cautiously):** dnSpy allows editing methods or IL instructions, which can be useful for bypassing checks (but requires saving a modified assembly).
        7.  **Debugging (Key Feature):**
            * Set breakpoints by clicking in the margin next to a line of code (or press F9).
            * Start debugging (Debug > Start Debugging or F5). You might need to specify the executable and arguments.
            * Use stepping controls (F10 Step Over, F11 Step Into).
            * Inspect variables in the 'Locals' or 'Watch' windows.
            * Examine memory or module information.

        **Focus Areas for CTFs:**
        * `Main` method or other entry points.
        * Code related to authentication, license checks, flag validation.
        * String obfuscation or decryption routines.
        * Anti-debugging checks.
        * Network communication or file I/O.

        **Note:** Direct execution/control of dnSpyEx (a GUI tool) is not available through this interface. This tool requires a suitable environment (typically Windows) with dnSpyEx installed. Include these analysis/debugging steps in your plan. Alternatives like ILSpy/AvaloniaILSpy (instruction tools also available) focus more on decompilation than debugging.
        """

        return instructions.strip()

# Example usage (for local testing)
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - [%(name)s] %(message)s')
    # Make sure the class name is correct here
    tool = DnspyTool()

    print("\n--- Test 1: Generate instructions for DLL ---")
    result1 = tool.run(file_path="MySecretLogic.dll")
    print(result1)

    print("\n--- Test 2: Generate instructions for EXE ---")
    result2 = tool.run(file_path="CrackMe.exe")
    print(result2)

    print("\n--- Test 3: Invalid path ---")
    result3 = tool.run(file_path="../important_config.cfg")
    print(result3)

