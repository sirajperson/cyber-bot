import os
import logging
from typing import Type, Any
from pydantic import BaseModel, Field
from crewai.tools import BaseTool

logger = logging.getLogger(__name__)

# --- Input Schema ---
class IdaProToolInput(BaseModel):
    """Input schema for IdaProTool."""
    file_path: str = Field(..., description="The path to the binary file (e.g., .exe, .dll, ELF) to analyze, relative to the '/app/data' directory.")

class IdaProTool(BaseTool):
    name: str = "IDA Pro Instructions"
    description: str = (
        "Provides instructions on how to use IDA Pro (Interactive Disassembler) "
        "to perform static analysis (disassembly and decompilation, if Hex-Rays is available) "
        "on various binary executables (PE, ELF, Mach-O, etc.). Use this when advanced "
        "static analysis is required and Ghidra is not preferred or insufficient. "
        "Input the file path relative to '/app/data'."
    )
    args_schema: Type[BaseModel] = IdaProToolInput

    def _run(self, file_path: str) -> str:
        """
        Returns instructions for using IDA Pro.
        """
        # --- Security/Context Check ---
        base_dir = "/app/data"
        # Sanitize file_path
        relative_path = os.path.normpath(os.path.join('/', file_path.lstrip('/'))).lstrip('/')
        target_file_abs = os.path.abspath(os.path.join(base_dir, relative_path))
        target_file_container_path = f"/app/data/{relative_path}" # Path as seen inside container

        if not target_file_abs.startswith(base_dir):
            logger.warning(f"Attempted path traversal: {file_path}")
            return f"Error: Invalid file path '{file_path}'. Path must be within the data directory."
        # Note: We don't check if the file *exists* here, as the tool only provides instructions.

        logger.info(f"Generating IDA Pro instructions for: {target_file_container_path}")

        # --- Generate Instructions ---
        instructions = f"""
        **Instructions for Analyzing Binary:** '{target_file_container_path}' **using IDA Pro**

        **IDA Pro** is a powerful commercial disassembler and debugger. (Requires separate installation and license).

        **General Steps for Static Analysis:**
        1.  **Load the Binary:** Open IDA Pro and load the file `{target_file_container_path}` (File > Open). Choose the appropriate loader options if prompted. Allow IDA to perform its initial auto-analysis.
        2.  **Navigate Views:** Use the main views:
            * **IDA View (Graph View):** Visualizes function control flow. Double-click blocks or press spacebar to switch to disassembly.
            * **IDA View (Text View):** Shows linear disassembly.
            * **Functions Window:** Lists all identified functions. Double-click to jump to a function.
            * **Strings Window:** Shows extracted strings. Double-click to see where a string is referenced (Xrefs).
            * **Imports/Exports Window:** Shows functions imported from or exported by the binary.
        3.  **Analyze Disassembly:** Examine the assembly code, focusing on functions related to the challenge (e.g., input handling, validation, encryption, flag checks). Use 'X' key to find cross-references (where a function/address is called or data is used).
        4.  **Decompilation (Hex-Rays - If Available):** If the Hex-Rays decompiler plugin is installed (commercial add-on), press 'F5' within a function to view decompiled C-like pseudocode, which is often much easier to understand. 
        5.  **Identify Key Logic:** Look for interesting function names, strings, constants, system calls, or complex loops/conditional logic related to the challenge goal.
        6.  **Rename & Comment:** Use 'N' key to rename functions/variables and ':' or ';' keys to add comments to improve understanding during analysis.

        **Focus Areas for CTFs:**
        * Entry point (`start`, `main`, `WinMain`, etc.).
        * Functions related to user input, passwords, licensing, encryption.
        * Obvious string literals containing "flag", "password", "secret", etc.
        * Unusual code sections or anti-debugging tricks.

        **Note:** Direct execution or control of IDA Pro is not available through this interface. Include these analysis steps in your plan. Ghidra provides similar functionality and is open-source.
        """

        return instructions.strip()

# Example usage (for local testing)
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - [%(name)s] %(message)s')
    tool = IdaProTool()

    print("\n--- Test 1: Generate instructions ---")
    # Agent provides path relative to /app/data
    result1 = tool.run(file_path="challenge_binary.exe")
    print(result1)

    print("\n--- Test 2: Invalid path ---")
    result2 = tool.run(file_path="../../bin/bash")
    print(result2)
