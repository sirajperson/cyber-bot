from crewai import Agent, Crew, Process, Task
from crewai.project import CrewBase, agent, crew, task

# --- Import Tools ---
# Import the specific CLI tool wrappers we will use
from ..tools.binary_exploit import FileTool, StringsTool, BinwalkTool, GdbTool, GhidraTool
from ..tools.general.terminal_tool import InteractiveTerminalTool

@CrewBase
class BinaryExploitCrew:
    """BinaryExploitCrew handles challenges involving binary analysis and reverse engineering."""
    agents_config = 'config/agents.yaml'
    tasks_config = 'config/tasks.yaml'

    @agent
    def binary_analyst(self) -> Agent:
        """Agent responsible for initial analysis and planning."""
        return Agent(
            config=self.agents_config['binary_analyst'],
            # --- Assign Tools ---
            tools=[
                FileTool(),
                StringsTool(),
                BinwalkTool(),
                GhidraTool(), # Add only if implementing headless/scripting interaction later
                GdbTool(), # Add only if implementing GDB interaction later
                InteractiveTerminalTool()  # Provide terminal access for other simple commands if needed
            ],
            verbose=True
        )

    @agent
    def re_validator(self) -> Agent:
        """Agent responsible for validating the analysis plan."""
        return Agent(
            config=self.agents_config['re_validator'],
            # Validator typically doesn't need execution tools
            tools=[],
            verbose=True
        )

    @task
    def analyze_binary_challenge_task(self) -> Task:
        """Task for the analyst to perform initial analysis and create the RE plan."""
        return Task(
            config=self.tasks_config['analyze_binary_challenge'],
            agent=self.binary_analyst(),
            # The context mechanism allows passing feedback back if the flow retries
            context=[self.validate_re_plan_task()] # Pass potential feedback
        )

    @task
    def validate_re_plan_task(self) -> Task:
        """Task for the validator to review the plan."""
        # The output Pydantic model (AnalysisVerification) is handled by the CrewController's flow
        return Task(
            config=self.tasks_config['validate_re_plan'],
            agent=self.re_validator(),
            # The validator needs the analyst's plan as context
            context=[self.analyze_binary_challenge_task()]
        )

    @crew
    def crew(self) -> Crew:
        """Creates the BinaryExploitCrew tasked with analyzing and validating RE plans."""
        return Crew(
            agents=self.agents,
            tasks=self.tasks,
            process=Process.sequential, # Analyst runs first, then Validator
            verbose=True,
            # Memory could be useful for the analyst to remember findings across steps/retries
            memory=True
        )
