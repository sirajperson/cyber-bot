from crewai import Agent, Crew, Process, Task
from crewai.project import CrewBase, agent, crew, task

# Import tools if needed later, e.g.:
# from src.viewers.crews.tools.example_tool import ExampleTool

@CrewBase
class BinaryExploitCrew:
    """BinaryExploitCrew handles challenges involving binary analysis and reverse engineering."""
    agents_config = 'config/agents.yaml'
    tasks_config = 'config/tasks.yaml'

    @agent
    def binary_analyst(self) -> Agent:
        """Agent responsible for initial analysis and planning."""
        return Agent(
            config=self.agents_config['binary_analyst'],
            # Add tools=[ExampleTool()] here if needed
            verbose=True
        )

    @agent
    def re_validator(self) -> Agent:
        """Agent responsible for validating the analysis plan."""
        return Agent(
            config=self.agents_config['re_validator'],
            verbose=True
        )

    @task
    def analyze_binary_challenge_task(self) -> Task:
        """Task for the analyst to create the RE plan."""
        return Task(
            config=self.tasks_config['analyze_binary_challenge'],
            agent=self.binary_analyst(),
            # Output file example (if needed):
            # output_file='binary_analysis_plan.md'
        )

    @task
    def validate_re_plan_task(self) -> Task:
        """Task for the validator to review the plan."""
        # Note: The output is implicitly handled by the Pydantic model
        # specified in the CrewController's flow for the evaluator crew.
        return Task(
            config=self.tasks_config['validate_re_plan'],
            agent=self.re_validator(),
        )

    @crew
    def crew(self) -> Crew:
        """Creates the BinaryExploitCrew tasked with analyzing and validating RE plans."""
        return Crew(
            agents=self.agents, # Automatically created by the @agent decorator
            tasks=self.tasks,   # Automatically created by the @task decorator
            process=Process.sequential, # Analyst runs first, then Validator
            verbose=True,
            # Memory configuration can be added here if needed:
            # memory=True
        )